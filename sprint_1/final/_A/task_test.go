package main

import (
	"fmt"
	"strings"
	"testing"
)

type task struct {
	K      int
	Input  string
	Result string
}

func TestTask(t *testing.T) {

	var taskItems = generateTasks()

	for i := 0; i < len(taskItems); i++ {
		t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			res := solution(taskItems[i].K, strings.Split(taskItems[i].Input, " "))
			if strings.Join(res, " ") != taskItems[i].Result {
				t.Errorf("Неверный ответ решения!\nОтвет: %s.\nПравильный: %s", res, taskItems[i].Result)
			}
		})
	}
}

// generateTasks создает задачи для теста
func generateTasks() (tasks []task) {
	tasks = append(
		tasks,
		task{
			K:      5,
			Input:  "0 1 4 9 0",
			Result: "0 1 2 1 0",
		},
		task{
			K:      6,
			Input:  "0 7 9 4 8 20",
			Result: "0 1 2 3 4 5",
		},
		task{
			K:      9,
			Input:  "98 0 10 77 0 59 28 0 94",
			Result: "1 0 1 1 0 1 1 0 1",
		},
		task{
			K:      20,
			Input:  "0 0 20 0 0 0 0 40 0 0 65 73 77 0 79 0 82 0 0 0",
			Result: "0 0 1 0 0 0 0 1 0 0 1 2 1 0 1 0 1 0 0 0",
		},
		//task{
		//	K:      100,
		//	Input: "0 152871953 35758611 0 23446050 761817124 672461861 39089193 0 0 188187704 70952507 0 940207165 444534846 414873160 164274761 858907213 703483471 385149009 0 951784545 0 0 429548140 437438577 945148040 847574158 245872275 686676631 260948138 220055723 394760373 608300732 279782591 507679937 0 437680330 268329165 0 526207708 383613661 675427551 1897698 195749095 614799594 453061364 447724793 262574330 142751994 0 982802179 743490824 761200905 765521674 589838606 779130650 489999132 614469924 534675750 795652391 532818235 0 7462720 796842821 987969359 0 820963159 0 639387490 729833831 725754736 559672176 265743221 506640772 0 727270808 849485724 679340445 857923486 351773599 231748526 620691377 753766836 684745656 522743742 168625601 821831113 900417993 894851534 0 553949137 692702162 0 299571161 94853602 215074276 62820842 0 404316147",
		//	Result: "0 1 1 0 1 2 2 1 0 0 1 1 0 1 2 3 4 3 2 1 0 1 0 0 1 2 3 4 5 6 6 5 4 3 2 1 0 1 1 0 1 2 3 4 5 5 4 3 2 1 0 1 2 3 4 5 6 5 4 3 2 1 0 1 2 1 0 1 0 1 2 3 3 2 1 0 1 2 3 4 5 6 7 7 6 5 4 3 2 1 0 1 1 0 1 2 2 1 0 1",
		//},
	)

	return
}
